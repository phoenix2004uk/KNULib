{local Z is import("util/indexOf").local T is"1:/etc/run.".export({parameter A,B is List(),D is 0.local F is List(0,"main",List(),Lex(),Lex(),List(),0).local H is 0.until H=B:length{F[4]:add(B[H],B[H+1]).F[5]:add(B[H]).set H to H+2.}set H to 0.until H=A:length{if A[H]:isType("string"){F[3]:add(A[H],F[2]:length).set H to H+1.}F[2]:add(A[H]).set H to H+1.}local X is{if F[6]{DeletePath(T+F[1]).Create(T+F[1]):write(F[0]+","+F[5]:join(",")).}}.local Y is{set F[0]to F[2]:length.}.local M is Lex("enable",{parameter J.if F[4]:hasKey(J) and not F[5]:contains(J){F[5]:add(J).X().}},"disable",{parameter J.local K is Z(F[5],J).if K>-1{F[5]:remove(K).X().}},"next",{set F[0]to F[0]+1.X().},"prev",{set F[0]to Max(0,F[0]-1).X().},"jump",{parameter J.if F[3]:hasKey(J){set F[0]to F[3][J].X().}else Y().},"end",Y).local L is M:copy. local W is{for key in F[4]:keys if F[5]:contains(key){local S is F[4][key].if D S().else S(M).}}.L:Add("run",{set F[6]to 1.if Exists(T+F[1]){local N is Open(T+F[1]):readAll:string. local O is N:split(",").set F[0]to O[0]:toNumber(0).set F[5]to List().if not N:endsWith(",")for irq in O:subList(1,O:length)F[5]:add(irq).}X().if F[0]<>0 W).until F[0]=F[2]:length{local P is F[2][F[0]].if D P().else P(M).wait 0.W().wait 0.}DeletePath(T+F[1]).}).L:Add("tag",{set F[1]to name.}).return L.}).}