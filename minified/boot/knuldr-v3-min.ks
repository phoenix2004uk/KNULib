{local Z is Stack().local Y is Lex().global function import{parameter N,S is "0:/lib3/",D is "1:/lib/".if not Y:hasKey(N){waitForKSC().if Exists(S+N+"-min")download(S+N+"-min",D+N).else if Exists(S+N)download(S+N,D+N).else panic("no lib: "+N).RunPath(D+N).Y:Add(N,Z:pop).}return Y[N].}global function export{parameter A.Z:push(A).}}function bundle{parameter A,B is Lex().for D in A set B[path(D):name]to import(D).return B.}function bundleDir{parameter A,B is Lex().for D in Open("0:/lib3/"+A+"/"):list:values{local F is path(D):name:replace(".ks","").if D:isFile set B[F]to import(A+"/"+F).}return B.}function waitForKSC{wait until HomeConnection:isConnected.}function download{parameter S,D.if Open(path(S)):size>Volume(1):freeSpace panic("too big: "+S).CopyPath(S,D).}function panic{parameter M.HudText(M,5,2,30,RED,TRUE).wait 60.Reboot.}function notify{parameter M,O is FALSE. HudText(M,5,4,20,CYAN,O).}{function Z{parameter A.if core:tag="" set core:part:tag to core:part:uid. return "0:/KSC/"+core:tag+"/"+A.}if STATUS="PRELAUNCH"{if not HomeConnection:isConnected panic("no connection").if Exists(Z("vessel"))download(Z("vessel"),"1:/vessel").else download("0:/default/vessel","1:/vessel").if Exists(Z("startup"))download(Z("startup"),"1:/startup").}if Exists("1:/startup")RunPath("1:/startup").if not Exists("1:/main"){waitForKSC().if not Exists(Z("main")){wait 60.Reboot.}local F is Z("main").download(F,"1:/main").DeletePath(F).}}RunPath("1:/main").DeletePath("1:/main").Reboot.